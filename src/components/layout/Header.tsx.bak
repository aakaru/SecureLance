import React from 'react';
import { Bell, Wallet, ChevronDown, Loader2 } from 'lucide-react';
import { 
  DropdownMenu, 
  DropdownMenuContent, 
  DropdownMenuItem, 
  DropdownMenuLabel, 
  DropdownMenuSeparator, 
  DropdownMenuTrigger 
} from '@/components/ui/dropdown-menu';
import { Button } from '@/components/ui/button';
import { useAuth } from '@/contexts/AuthContext';
import { useLocation } from 'react-router-dom';
import { useAccount, useBalance } from 'wagmi'; 

interface HeaderProps {
  sidebarCollapsed: boolean;
}

export const Header = ({ sidebarCollapsed }: HeaderProps) => {
  const { user, logout } = useAuth();
  const location = useLocation();
  const { address, isConnected } = useAccount(); 
  const { data: balanceData, isLoading: isBalanceLoading } = useBalance({ 
    address: address,
    
  });
  
  
  const getPageTitle = () => {
    switch (location.pathname) {
      case '/dashboard':
        return 'Dashboard';
      case '/browse':
        return 'Browse Contracts';
      case '/my-contracts':
        return 'My Contracts';
      case '/submit-work':
        return 'Submit Work';
      case '/reputation':
        return 'Reputation';
      case '/profile':
        return 'Profile';
      default:
        return 'SecureLance';
    }
  };

  const notifications = [
    { id: 1, text: 'New contract proposal received', time: '2 hours ago' },
    { id: 2, text: 'Payment completed for Project A', time: '1 day ago' },
    { id: 3, text: 'Milestone approved', time: '2 days ago' }
  ];

  return (
    <header className="h-16 border-b border-border flex items-center justify-between px-6 bg-background">
      <div className="flex items-center">
        {sidebarCollapsed && (
          <h1 className="text-lg font-semibold text-foreground">{getPageTitle()}</h1>
        )}
      </div>
      
      <div className="flex items-center space-x-4">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="icon" className="relative">
                  <Bell className="h-5 w-5" />
                  <span className="absolute top-1 right-1 w-2 h-2 bg-web3-primary rounded-full"></span>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-80">
                <DropdownMenuLabel>Notifications</DropdownMenuLabel>
                <DropdownMenuSeparator />
                {notifications.map(notification => (
                  <DropdownMenuItem key={notification.id} className="flex flex-col items-start py-2">
                    <span>{notification.text}</span>
                    <span className="text-xs text-muted-foreground">{notification.time}</span>
                  </DropdownMenuItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>
            
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" className="flex items-center space-x-2" disabled={!isConnected}>
                  <Wallet className="h-5 w-5 text-web3-primary" />
                  <span className="text-sm">
                    {isConnected ? (
                      isBalanceLoading ? (
                        <Loader2 className="h-4 w-4 animate-spin" />
                      ) : balanceData ? (
                        <span className="font-medium">
                          {parseFloat(balanceData.formatted).toFixed(4)} {balanceData.symbol}
                        </span>
                      ) : (
                        <span className="text-muted-foreground">N/A</span>
                      )
                    ) : (
                      <span className="text-muted-foreground">Connect Wallet</span>
                    )}
                  </span>
                  {isConnected && <ChevronDown className="h-4 w-4" />}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                {isConnected && user ? (
                  <>
                    <DropdownMenuLabel>{user.username || 'Account'}</DropdownMenuLabel>
                    <DropdownMenuLabel className="text-xs text-muted-foreground truncate">
                      {user.address}
                    </DropdownMenuLabel>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem onClick={() => window.open(`https:
                    <DropdownMenuItem onClick={() => {
                      if (address) { 
                        navigator.clipboard.writeText(address); 
                        alert('Address copied to clipboard!');
                      } else {
                        alert('Could not copy address. Wallet not connected or address unavailable.');
                      }
                    }}>Copy Address</DropdownMenuItem>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem onClick={logout}>Logout</DropdownMenuItem>
                  </>
                ) : (
                  <DropdownMenuItem disabled>Connect Wallet</DropdownMenuItem>
                )}
              </DropdownMenuContent>
            </DropdownMenu>
      </div>
    </header>
  );
};
